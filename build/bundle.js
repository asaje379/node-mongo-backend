(()=>{"use strict";var e={n:t=>{var a=t&&t.__esModule?()=>t.default:()=>t;return e.d(a,{a}),a},d:(t,a)=>{for(var r in a)e.o(a,r)&&!e.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:a[r]})}};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),e.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t);const t=require("express");var a=e.n(t);const r=require("cors");var n=e.n(r);const s=require("mongoose");var o=e.n(s);const i=require("chalk");var c=e.n(i);const d=console.log,u=(e,t=null)=>d(c().red.bold(`\n[ERROR${t?":"+t:""}]`,e)),{Schema:l}=o();let m={type:String,trim:!0,validate:[function(e){return/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/.test(e)},"Please provide a valid email address"],match:[/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/,"Please fill a valid email address"]},y={type:String,match:/^\w+([\.-]?\w+)*@\w+([\.-]?\w+)*(\.\w{2,3})+$/};const g={STRING:["minlength","maxlength","match","enum","uppercase","lowercase","trim","required","validate","default"],NUMBER:["min","max","enum","required","validate","default"],DATE:["min","max","required","validate","default"]};function p(e){const t=e.type;let a={};if("Email"!==t&&"Text"!==t&&t!==String&&t!==Boolean||(a={...e,...b(t)}),"Password"===t||"File"===t||t===Date){const r=t===Date?"DATE":"STRING";a=b(t),a={...a,...w(e,r)}}return t===o().Types.ObjectId&&(a={...e}),a}function w(e,t){let a={},r=Object.keys(e);var n;return(n=g[t],r.filter((e=>n.includes(e)))).forEach((t=>{a[t]=e[t]})),a}function b(e){let t={};switch(e){case"Text":t={type:String};break;case"Email":t=m;break;case"Password":t=y;break;case"File":t={type:String};break;case Number:t={type:Number};break;case Date:t={type:Date};break;case Boolean:t={type:Boolean};break;case String:t={type:String}}return t}const f=function(e){const t=a().Router(),r=function(e){return o().model(e.name,(e=>{let t={};for(const[a,r]of Object.entries(e))t=null===r||"object"!=typeof r||Array.isArray(r)?Array.isArray(r)?{...t,[a]:r}:{...t,[a]:b(r)}:{...t,[a]:p(r)};return new l(t)})(e.schema))}(e);return t.get("/",(async(t,a)=>{try{const e=await r.find({...t.query});a.status(200).json(e)}catch(t){u(`On route '[GET] /${e.name}' : Unable to read data`,500),a.status(500).json({message:"Unable to read data"})}})),t.get("/:id",(async(t,a)=>{try{const n=await r.findById(t.params.id);n?a.status(200).json(n):(u(`On route '[GET] /${e.name}/${t.params.id}' : Resource not found.`,404),a.status(404).json({message:"Not found!"}))}catch(a){u(`On route '[GET] /${e.name}/${t.params.id}' : ${a.message}`,500)}})),t.post("/",(async(t,a)=>{try{const e=new r({...t.body});console.log(t.body,e),await e.save(),a.status(201).json({message:"Item Created!",id:e._id})}catch(t){u(`On route '[POST] /${e.name}' : ${t.message}`,422),a.status(422).json(t)}})),t.delete("/:id",(async(e,t)=>{try{await r.deleteOne({_id:e.params.id}),t.status(200).json({message:"Item deleted!"})}catch(e){t.status(422).json(e)}})),t.put("/:id",(async(e,t)=>{delete e.body._id;try{await r.updateOne({_id:e.params.id},{...e.body}),t.status(200).json({message:"Item Updated!"})}catch(e){t.status(422).json(e)}})),t};e.g.Text="Text",e.g.Email="Email",e.g.Password="Password",e.g.File="File",e.g.Date=Date,e.g.Number=Number,e.g.Boolean=Boolean,e.g.ObjectID=o().Types.ObjectId;const h={name:{type:Text,required:!0},email:Email,createAt:Date,isValid:Boolean,pwd:Password,weight:Number,photo:File},j=[{name:"comments",schema:{name:String,msg:String}},{name:"students",schema:{name:{type:Text,minLength:3,maxLength:255,required:!0},email:Email,password:Password,confirmPassword:{type:Password,required:!0,match:/.{4,}/},age:Number,avatar:{type:File,accept:"pdf",maxSize:"1Mo",required:!0},createAt:{type:Date,min:"2021-06-06",max:"2025-09-01",required:!0,required:!0},categorie:[{type:ObjectID,ref:"categorie"}],role:{type:Text,enum:["USER","ADMIN","SUPER-ADMIN"]},something:String,enable:{type:Boolean,default:!0},secondEmail:Email}},{name:"clients",schema:h}],v=a()();v.use(n()()),v.use(a().json()),o().connect("mongodb+srv://opencts:OpenCTS2021@cluster0.ralov.mongodb.net/myFirstDatabase?retryWrites=true&w=majority",{useNewUrlParser:!0,useUnifiedTopology:!0,useFindAndModify:!1,useCreateIndex:!0}).catch((e=>u("Unable to connect to Mongo database"))),function(e){for(const t of j)e.use("/"+t.name,f(t))}(v);const S=process.env.PORT||4200;v.listen(S,(e=>{return t="Server is started",d(c().green("\n[SUCCESS]",t));var t}))})();